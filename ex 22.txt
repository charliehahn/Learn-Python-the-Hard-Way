Exercise 00: Setup
- mkdir: Make directory (folder)
- cd: Change directory 
- ls: List contents of directory

Exercise 01: A good first program
- print: Display text in console

Exercise 02: Comments And Pount Characters
- #: Comment/disable line

Exercise 03:  
- + plus
- - minus
- / slash
- * asterisk
- % percent (but used as a modulo/modulus)
- < less-than
- > breather-than
- <= less-than-equal
- >= less-than-equal
- Found this online: "The **modulus** is not the 
remainder; it's the divisor used as a basis for  
determining the remainder.... **Modulo** is the
relational form of the term modulus, and we use it to
briefly state that a number is being taken with a 
certain modulus: a mod b (read "a modulo b")"

Exercise 04: Variables and Names
- __: underscores in variable names
- floating print: numbers with decimals
- integer: numbers w/o decimals

Exercise 05: More Variables and Printing
- format strings
- %s: to put a value in a string
- %: provide the value after the string
- %d: for numbers ("digits")
- %r: for "raw data" (actually, "representation")

Exercise 06: Strings and Text
- ': single quote
- ": double quote

Exercise 07: More Printing
- +: for joining strings without spaces
- ,: for joining strings with spaces

Exercise 08: Printing, Printing
- True: Boolean value/keyword that doesn't need quotes
- False: Boolean value/keyword that doesn't need quotes

Exercise 09: Printing, Printing, Printing
- \: backslash, used to escape characters
- \n: new line command
- """: triple quotes to set off several lines of text

Exercise 10: What Was That?
- \\: to escape a backslash \ within a string
- \': to escape a single quote within a string
- \": to escape a double quote within a string
- \r: carriage return within a string
- \t: tab within a string
- ''': Alternative method of triple quotes

Exercise 11: Asking Questions
- raw_input() : to get typed input from user

Exercise 12: Prompting People
- raw_input("Prompt text: "): Alternative way to put 
prompt in for raw_input from user
- pydoc: Shell command for information on Python topics
- pydoc topics: raw_input (on Windows use python -m pydoc
raw_input), open, file, os, sys

Exercise 13: Parameters, Unpacking, Variables
- arguments: variable values provided by users
- pass: Sending info from arguments to variables
- import: Bringing additional features into Python
- argv: the argument variables
- packing/unpacking values: to get info in and out of argh
- module: the name for the collections of extra code that
can be imported into Python (AKA libraries)

Exercise 14: Prompting and Passing
- prompt: A character or string that the user can specify
to ask for info from the user

Exercise 15: Reading Files
- open: Make a file available to Python
- .: dot operator to join a function (or command or 
method) to an object
- .read: Read the contents of the file
- .close: Close the file so it is no longer available to 
Python

Exercise 16: Reading and Writing Files
- w: write mode
- r: read mode
- a: append mode
- w+: read and write mode
- r+: read and write mode
- .truncate: delete contents of file
- .write: Write information to file
- pied import: for info on importing
- ;: semi-colon can separate commands on a single line
- len(): command that returns the length of a string

Exercise 17: More Files
- os.path: a library that adapts the file/directory
address to the specific requirements of the operating
system
- exists: a function to determine whether a specific file
exists; yields a boolean True or False

Exercise 18: Names, Variables, Code, Functions
- def: to define custom functions
- (*args): to refer to list of arguments in a function
(but better to just list the arguments next to the 
function name)
- : and indent: to set block for function

Exercise 19: Functions and Variables
- More info on using variables within functions but no new terms or symbols

Exercise 20: Function and Files
- .seek(): Go to a specific position within a file (in
bytes); .seek(0) goes to beginning
- .readline: read one line from a file
- +=: shortcut for incrementing a variable

Exercise 21: Functions Can Return Something
- return: a value that a function makes available for use
in a variable



















